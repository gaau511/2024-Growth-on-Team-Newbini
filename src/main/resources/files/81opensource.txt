5
객체 생성 방법에 따른 유지보수 방법

팩토리메서드 예제
배 라는 객체 생성
비슷한 객체를 만들때 배 주문 함수 자체가 요구사항에 따라 확장될 필요가 있을까? (if else문을 사용하여)

팩토리 메서드
1. 제품에 대한 추상화
ex) ship 에서 extends 되어 containership, oiltankership 등을 class 추가해줌
	장점 : 추가, 삭제할때 기존의 코드들을 살펴 볼 필요가 없음
2. 객체를 만드는 과정도 추상화 해야함
ex) shipFactory class 선언, 그리고 그안에 method로 ordership
그리고 method를 넣어주는게 아니라 상속을 통해서 containerShipFactory를 만들어줘

main 함수에서 배 주문

7
물류회사를 통한 예시
ex) 쿠팡이츠 등의 배달수단 다양화

~읽어봐~

15
장단점은 대체로 비슷함
장: 객체지향 프로그램의 원칙을 잘 지키게 해줌 (ex 단일 책임, 개방폐쇄)
단 : 코드가 복잡해짐

factory method는 비슷한 형태의 method 를 제공할때 필요!


18
빌더 패턴
객체가 여기저기 많이 쓰이는 객체일때

getter/setter를 통해 매개변수에 접근하는 경우
: 단점 getter setter 다 만들어야됨, 재료가 안 들어가도 작동은 가능

빌더패턴을 쓰면
헴버거 빌더라는 개체를 통해서 명시적으로 만들어줌

return type이 builder 임 -> .을 통해서 연결/추가해주는게 가능함
다 한꺼번에 모아서 빌드해줄거야! -> 관리가 매우 용이
모든 함수가 다 모이면 build라는 함수를 call 해줄 수 있어

첫번째 장점 : 매개변수의 이름을 보여줌 -> 엄청난 장점은 아냐 요즘은 
두번째 : default 매개변수 정의가능
세번쨰 : optional 매개변수 정의가능

필수 멤버변수랑 선택 멤버변수를 나눠서 표현 가능
-> 필수 멤버는 빌더의 생성자를 통해 설정,
나머지 선택 멤버는 메서드로 설정

네번째 장점 : 생성해야하는 개체를 모두 모아서 한번에 for loop을 통해 객체 생성가능 -> 매우편리함! 

id를 관리하는 method는 하나 -> 그 부분에만 가서 제약사항을 주거나, 수정해주면됨
함수를 매번 call 하거나, 같은 코드를 여러번 쓸 필요 없음

student 보다 ppt가 조금 더 복잡함

여러 구성요소로 만들어지는 객체를 더 편하게 만들어 줄 수 있음

27
장단점

30
행위 패턴

32
중요함

33
옵서버 패턴
이름이 구려
구독서비스에 가장 많이 쓰임

ex) 날씨정보 서비스
초기 코드가 왜 안좋은지 녹음 들어 ,근데 이해 잘 안될듯

observerpattern 에는 세가지 default method (publisher)가 주어짐
추가, 삭제, 알림

날씨 측정값을 원하는 구독자에게 알려주는 것까지 책임 져야함

main의 for loop, 구독자 list 선언이 사라짐
날씨정보 추가만 해주고 
날싸기 변경되면
알아서 뿌려줌


41
장단점

예시를 뻥튀기 했을 때 어떤 문제가 생겨?
우리 실생활에서는 어떤 디자인패턴을 써?
 ㄴ 두가지 쉽게 디자인패턴을 공부하는 법




